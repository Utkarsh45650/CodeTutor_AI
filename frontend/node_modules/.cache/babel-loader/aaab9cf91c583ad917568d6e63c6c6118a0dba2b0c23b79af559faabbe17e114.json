{"ast":null,"code":"const API_BASE_URL = 'http://localhost:5000/api';\nclass ApiService {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n  getAuthHeaders() {\n    const token = localStorage.getItem('token');\n    return {\n      'Content-Type': 'application/json',\n      ...(token && {\n        'Authorization': `Bearer ${token}`\n      })\n    };\n  }\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n\n    // Create an AbortController for timeout functionality\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout\n\n    const config = {\n      headers: this.getAuthHeaders(),\n      signal: controller.signal,\n      ...options\n    };\n    try {\n      console.log(`API Request: ${endpoint}`);\n      const response = await fetch(url, config);\n      clearTimeout(timeoutId);\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'An error occurred');\n      }\n      console.log(`API Response: ${endpoint} - Success`);\n      return data;\n    } catch (error) {\n      clearTimeout(timeoutId);\n      if (error.name === 'AbortError') {\n        console.error(`API Timeout: ${endpoint}`);\n        throw new Error('Request timed out. Please try again.');\n      }\n      console.error(`API Error: ${endpoint}`, error);\n      throw error;\n    }\n  }\n\n  // Auth methods\n  async register(username, password) {\n    return this.request('/register', {\n      method: 'POST',\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n  }\n  async login(username, password) {\n    return this.request('/login', {\n      method: 'POST',\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n  }\n\n  // Progress methods\n  async getUserProgress() {\n    return this.request('/user/progress');\n  }\n  async updateProgress(language, topic, quizScore = null) {\n    return this.request('/user/progress', {\n      method: 'POST',\n      body: JSON.stringify({\n        language,\n        topic,\n        quiz_score: quizScore\n      })\n    });\n  }\n\n  // Tutor methods\n  async getTutorContent(language, topic) {\n    return this.request(`/tutor/content?language=${language}&topic=${encodeURIComponent(topic)}`);\n  }\n  async getAvailableTopics(language) {\n    return this.request(`/tutor/topics?language=${language}`);\n  }\n  async getTopicNotes(language, topic) {\n    return this.request(`/tutor/notes?language=${language}&topic=${encodeURIComponent(topic)}`);\n  }\n\n  // Quiz methods\n  async generateQuiz(language, topic, difficulty = 'Easy') {\n    return this.request('/quiz/generate', {\n      method: 'POST',\n      body: JSON.stringify({\n        language,\n        topic,\n        difficulty\n      })\n    });\n  }\n  async submitQuiz(quizId, answers, language, topic, difficulty) {\n    return this.request('/quiz/submit', {\n      method: 'POST',\n      body: JSON.stringify({\n        quiz_id: quizId,\n        answers,\n        language,\n        topic,\n        difficulty\n      })\n    });\n  }\n  async generateCustomQuiz(language, topics) {\n    return this.request('/quiz/custom', {\n      method: 'POST',\n      body: JSON.stringify({\n        language,\n        topics\n      })\n    });\n  }\n\n  // Compiler methods\n  async runCode(code, language) {\n    return this.request('/run_code', {\n      method: 'POST',\n      body: JSON.stringify({\n        code,\n        language\n      })\n    });\n  }\n}\nexport default new ApiService();","map":{"version":3,"names":["API_BASE_URL","ApiService","constructor","baseURL","getAuthHeaders","token","localStorage","getItem","request","endpoint","options","url","controller","AbortController","timeoutId","setTimeout","abort","config","headers","signal","console","log","response","fetch","clearTimeout","data","json","ok","Error","message","error","name","register","username","password","method","body","JSON","stringify","login","getUserProgress","updateProgress","language","topic","quizScore","quiz_score","getTutorContent","encodeURIComponent","getAvailableTopics","getTopicNotes","generateQuiz","difficulty","submitQuiz","quizId","answers","quiz_id","generateCustomQuiz","topics","runCode","code"],"sources":["C:/Users/utkar/Desktop/SkillCred Projects/AI_tutor/frontend/src/utils/api.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:5000/api';\r\n\r\nclass ApiService {\r\n  constructor() {\r\n    this.baseURL = API_BASE_URL;\r\n  }\r\n\r\n  getAuthHeaders() {\r\n    const token = localStorage.getItem('token');\r\n    return {\r\n      'Content-Type': 'application/json',\r\n      ...(token && { 'Authorization': `Bearer ${token}` })\r\n    };\r\n  }\r\n\r\n  async request(endpoint, options = {}) {\r\n    const url = `${this.baseURL}${endpoint}`;\r\n    \r\n    // Create an AbortController for timeout functionality\r\n    const controller = new AbortController();\r\n    const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout\r\n    \r\n    const config = {\r\n      headers: this.getAuthHeaders(),\r\n      signal: controller.signal,\r\n      ...options\r\n    };\r\n\r\n    try {\r\n      console.log(`API Request: ${endpoint}`);\r\n      const response = await fetch(url, config);\r\n      clearTimeout(timeoutId);\r\n      \r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'An error occurred');\r\n      }\r\n\r\n      console.log(`API Response: ${endpoint} - Success`);\r\n      return data;\r\n    } catch (error) {\r\n      clearTimeout(timeoutId);\r\n      if (error.name === 'AbortError') {\r\n        console.error(`API Timeout: ${endpoint}`);\r\n        throw new Error('Request timed out. Please try again.');\r\n      }\r\n      console.error(`API Error: ${endpoint}`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Auth methods\r\n  async register(username, password) {\r\n    return this.request('/register', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ username, password })\r\n    });\r\n  }\r\n\r\n  async login(username, password) {\r\n    return this.request('/login', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ username, password })\r\n    });\r\n  }\r\n\r\n  // Progress methods\r\n  async getUserProgress() {\r\n    return this.request('/user/progress');\r\n  }\r\n\r\n  async updateProgress(language, topic, quizScore = null) {\r\n    return this.request('/user/progress', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ language, topic, quiz_score: quizScore })\r\n    });\r\n  }\r\n\r\n  // Tutor methods\r\n  async getTutorContent(language, topic) {\r\n    return this.request(`/tutor/content?language=${language}&topic=${encodeURIComponent(topic)}`);\r\n  }\r\n\r\n  async getAvailableTopics(language) {\r\n    return this.request(`/tutor/topics?language=${language}`);\r\n  }\r\n\r\n  async getTopicNotes(language, topic) {\r\n    return this.request(`/tutor/notes?language=${language}&topic=${encodeURIComponent(topic)}`);\r\n  }\r\n\r\n  // Quiz methods\r\n  async generateQuiz(language, topic, difficulty = 'Easy') {\r\n    return this.request('/quiz/generate', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ language, topic, difficulty })\r\n    });\r\n  }\r\n\r\n  async submitQuiz(quizId, answers, language, topic, difficulty) {\r\n    return this.request('/quiz/submit', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ \r\n        quiz_id: quizId, \r\n        answers, \r\n        language, \r\n        topic, \r\n        difficulty \r\n      })\r\n    });\r\n  }\r\n\r\n  async generateCustomQuiz(language, topics) {\r\n    return this.request('/quiz/custom', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ language, topics })\r\n    });\r\n  }\r\n\r\n  // Compiler methods\r\n  async runCode(code, language) {\r\n    return this.request('/run_code', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ code, language })\r\n    });\r\n  }\r\n}\r\n\r\nexport default new ApiService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}